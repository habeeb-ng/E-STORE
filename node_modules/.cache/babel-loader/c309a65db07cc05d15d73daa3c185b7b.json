{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","status","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","reducer"],"sources":["/Users/habeebawolumate/Documents/Builds/e-commerce/src/features/counter/counterSlice.js"],"sourcesContent":["import {  createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  }\n})\n \n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAAUA,WAAV,QAA6B,kBAA7B;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CADY;EAEnBC,MAAM,EAAE;AAFW,CAArB;AAMA,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EACtCK,IAAI,EAAE,SADgC;EAEtCJ,YAFsC;EAGtC;EACAK,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACN,KAAN,IAAe,CAAf;IACD,CAPO;IAQRO,SAAS,EAAGD,KAAD,IAAW;MACpBA,KAAK,CAACN,KAAN,IAAe,CAAf;IACD,CAVO;IAWR;IACAQ,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;MACpCH,KAAK,CAACN,KAAN,IAAeS,MAAM,CAACC,OAAtB;IACD;EAdO;AAJ4B,CAAD,CAAhC;AAuBP,OAAO,MAAM;EAAEL,SAAF;EAAaE,SAAb;EAAwBC;AAAxB,IAA8CN,YAAY,CAACS,OAAjE;AAGP,eAAeT,YAAY,CAACU,OAA5B"},"metadata":{},"sourceType":"module"}